<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组循环左移</title>
      <link href="2021/02/07/%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%B7%A6%E7%A7%BB/"/>
      <url>2021/02/07/%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%B7%A6%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>叹隙中驹，</p><p>石中火，</p><p>梦中身。</p><p>　　　　　——苏轼　《行香子·述怀》</p></blockquote><h3 id="题目"><a href="#题目" class="headerlink" title=" 题目: "></a><font color = #EBB108 > 题目: </font></h3><p>7-3 数组循环左移 (20 分)</p><p>本题要求实现一个对数组进行循环左移的简单函数：一个数组<em>a</em>中存有<em>n</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向左移<em>m</em>（≥0）个位置，即将<em>a</em>中的数据由（<em>a</em>0<em>a</em>1⋯<em>a**n</em>−1）变换为（<em>a**m</em>⋯<em>a**n</em>−1<em>a</em>0<em>a</em>1⋯<em>a**m</em>−1）（最前面的<em>m</em>个数循环移至最后面的<em>m</em>个位置）。如果还需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入第1行给出正整数<em>n</em>（≤100）和整数<em>m</em>（≥0）；第2行给出<em>n</em>个整数，其间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出循环左移<em>m</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code>8 31 2 3 4 5 6 7 8</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class=" language-out"><code class="language-out">4 5 6 7 8 1 2 3</code></pre><h3 id="讲解思路"><a href="#讲解思路" class="headerlink" title="讲解思路"></a><font color=#EBB108>讲解思路</font></h3><p>这道题很简单，有很多种做法，但是这周主要是为了练习链表，所以我具体写一下数组模拟静态态链表实现的方法。 其实陈冬婷的小脑真的很垃圾，总是被绕晕~<br>       为了说清楚，画图！我以pta给的输入案例举的例子</p><p>输入时，结构体数组的内部存储顺序是这样：</p><p><img src="https://i.loli.net/2021/02/07/3MkAgYm5if4ZJRt.png" alt="image-20210207152655774"></p><p>我们希望的输出顺序是这样的：</p><p><img src="https://i.loli.net/2021/02/07/AzQ21YkGEfjgw4P.png" alt="image-20210207152752633"></p><p>所以我们的猪脑肯定会很自然地想到：</p><p>当数组下标 i 为0时，如果 address是3，那么Node[3]==4，就可以得到第一个输出的数字 4。</p><p>———&gt; 如果    Node[0].address==3  </p><p>———–&gt;那么根据下标3，可以在数组中找到 ： Node[3]==4</p><p> ———-&gt;  也就是 Node[Node[i].address]==4</p><p>也就是下表：</p><p><img src="https://i.loli.net/2021/02/07/R7Fb2NcgavH3eVY.png" alt="image-20210207154603881"></p><pre class=" language-c"><code class="language-c">题中是n个整数，移动m位分段存地址的代码：当i<span class="token operator">&lt;</span>n<span class="token operator">-</span>m时，Node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token operator">=</span>m<span class="token operator">+</span>i其他的就是 <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adddress<span class="token operator">=</span>j  j<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a><font color=#EBB108>具体实现代码</font></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">int</span> address<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Node<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//键盘输入+存地址 </span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span>m<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token operator">=</span>m<span class="token operator">+</span>i<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token operator">=</span>j<span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按 pta 的格式输出 </span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>Node<span class="token punctuation">[</span>Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>Node<span class="token punctuation">[</span>Node<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 pta </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>且将新火试新茶</title>
      <link href="2021/02/06/%E4%B8%94%E5%B0%86%E6%96%B0%E7%81%AB%E8%AF%95%E6%96%B0%E8%8C%B6/"/>
      <url>2021/02/06/%E4%B8%94%E5%B0%86%E6%96%B0%E7%81%AB%E8%AF%95%E6%96%B0%E8%8C%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 且将新火试新茶，</p><p> 诗酒趁年华　　</p><p> 　　　　　　　　　 ——苏轼 《望江南·超然台作》　　</p></blockquote><br><p>著名的表演艺术家陈冬婷嚣张地来讲废话啦!</p><p>我真的是一个能靠大脑，绝不靠笔记本的懒女子~~　　</p><p>之前一直逃避写博客，原因是CSDN太丑了，扼杀了一位妙龄女孩想写博客的欲望</p><p>后来觉得自己怎么可以又菜又不写博客？</p><p>这和我又丑又懒得化妆的行为有什么区别？</p><p>所以！我！可爱的机灵鬼又屁颠屁颠过来克服困难啦！</p><p>CSDN这么丑，肯定配不上我如此优美的文字，我写博客的前戏真的好长好长（==  </p><h6 id="第一件事先搭建一个闪闪发光惊天霹雳的好看博客"><a href="#第一件事先搭建一个闪闪发光惊天霹雳的好看博客" class="headerlink" title=" 第一件事先搭建一个闪闪发光惊天霹雳的好看博客~"></a><font color=#EBB108> 第一件事先搭建一个闪闪发光惊天霹雳的好看博客~</font></h6><p>刚开始选用的是gitee+hexo，因为觉得gitee服务器在中国，肯定比github快不少。</p><p>确实快不少</p><p>好吧,我错了，我陈冬婷就是个超级坏的懒蛋! 我真心忏悔</p><p>因为gitee不能一键部署，上传要去gitee更新一下，然后……我就懒得写了</p><p>搁置了好久，某年某月某日，出门前我又懒得化妆，瞬间就想到了被我遗弃好久的hexo~</p><p>然后为了不让找理由不写博客，我就搭在GitHub上啦！！！  </p><h6 id="第二件事，自己对自己发誓"><a href="#第二件事，自己对自己发誓" class="headerlink" title=" 第二件事，自己对自己发誓 "></a><font color=#EBB108> 第二件事，自己对自己发誓 </font></h6><p>我以下半辈子的奶茶，芒果，麦哥烧烤，卫龙辣条，辣魔王毛肚，湘琴和直树的幸福，我弟的身高，我《植物大战      </p><p>僵尸》的金币，我爸爸种的槟榔树，我妈妈腌的酸菜发誓：我一周最少写一篇博客，考试周除外</p><p>【 这女的对自己好狠！！！】</p><h6 id="第三件事情，博客写什么内容呢？"><a href="#第三件事情，博客写什么内容呢？" class="headerlink" title=" 第三件事情，博客写什么内容呢？"></a><font color=#EBB108> 第三件事情，博客写什么内容呢？</font></h6><ul><li><p>数据结构的题目，韩老师实训期间发在pta上的</p></li><li><p>数据结构知识点（自己觉得很淦的内容）</p></li><li><p>深度学习</p></li><li><p>计算机组成原理</p></li><li><p>java</p></li><li><p>python</p></li><li><p>C++ </p></li><li><p>其他杂碎知识随笔【可爱知识的随笔】</p></li><li><p>自己学习中的一些吹牛的大话【途中随笔】 （吹牛真的好快乐！！我好喜欢吹牛哈哈哈哈哈哈）</p><p>后面想到酷酷的名字，再补上他们的名字吧~</p><p>陈冬婷要去吃夜宵啦，</p><p>知识，你赶紧想方设法来到我脑子里，</p><p>我的脑子给你开门咯~</p></li></ul><p><img src="https://i.loli.net/2021/02/06/dki3r1q4S5VANnz.jpg" alt="通往陈冬婷大脑的门~"></p>]]></content>
      
      
      <categories>
          
          <category> 途中随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
